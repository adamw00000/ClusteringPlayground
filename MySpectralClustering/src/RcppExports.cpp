// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// Mnn
NumericMatrix Mnn(NumericMatrix X, int M);
RcppExport SEXP _MySpectralClustering_Mnn(SEXP XSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(Mnn(X, M));
    return rcpp_result_gen;
END_RCPP
}
// GenerateG
NumericMatrix GenerateG(NumericMatrix S);
RcppExport SEXP _MySpectralClustering_GenerateG(SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(GenerateG(S));
    return rcpp_result_gen;
END_RCPP
}
// ModifyG
NumericMatrix ModifyG(NumericMatrix G);
RcppExport SEXP _MySpectralClustering_ModifyG(SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(ModifyG(G));
    return rcpp_result_gen;
END_RCPP
}
// GenerateD
NumericMatrix GenerateD(NumericMatrix G);
RcppExport SEXP _MySpectralClustering_GenerateD(SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(GenerateD(G));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MySpectralClustering_Mnn", (DL_FUNC) &_MySpectralClustering_Mnn, 2},
    {"_MySpectralClustering_GenerateG", (DL_FUNC) &_MySpectralClustering_GenerateG, 1},
    {"_MySpectralClustering_ModifyG", (DL_FUNC) &_MySpectralClustering_ModifyG, 1},
    {"_MySpectralClustering_GenerateD", (DL_FUNC) &_MySpectralClustering_GenerateD, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_MySpectralClustering(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
